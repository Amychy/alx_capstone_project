pip install virtualenv
virtualenv quiz
quiz\Scripts\activate
pip install flask


<!DOCTYPE html>
<html>
<head>
    <!-- Include your CSS and other required headers -->
</head>
<body>
    <h1>Quizzes in Category: {{ category }}</h1>
    <ul>
        {% for quiz in quizzes %}
            <li><a href="/quiz/{{ quiz.id }}">{{ quiz.title }}</a></li>
        {% endfor %}
    </ul>
</body>
</html>


@app.route('/quizzes/<category>')
def quizzes(category):
    # Query your database to get quizzes related to the selected category
    quizzes = Quiz.query.filter_by(category=category).all()
    return render_template('quizzes.html', category=category, quizzes=quizzes)



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuizWiz - Test Your Knowledge</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ url_for('static', filename='images/logo.png') }}">

    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.15/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <header>
        <nav class="flex header-bg flex-row justify-around items-center py-5 my-0 md:px-0 px-8 border-b">
            <div>
                <img class="w-28" src="{{ url_for('static', filename='images/logo.png') }}">
            </div>
            <a class="hamburger md:hidden" href="#" aria-label="Toggle Menu">
                <span class="bar"></span>
                <span class="bar"></span>
                <span class="bar"></span>
              </a>
              <ul class="nav-links black hidden md:flex md:flex-row text-xl font-medium md:gap-16 gap-3.5 items-left md:items-center">
                <li class="nav_link nav_links">QUIZES</li>
                <li class="nav_link nav_links">LEADERBOARD</li>
                <li class="nav_link nav_links">FAQ</li>
              </ul>
            <button class="header-btn-bg text-white md:py-3 py-2 px-3 md:px-5 rounded-xl md:text-lg font-medium">Login</button>
        </nav>
    </header>
    
    <main class="md:my-20 my-10 mx-10 md:mx-28">
        <section class="categories flex flex-col gap-10">
            <div class="p-2.5 rounded-lg catergory-border md:w-80">
                <h2 class="text-center black font-bold uppercase text-xl md:text-2xl">Newly Published Quiz</h2>
            </div>
            {% for category in categories %}
                <a class="flex flex-col gap-4 category" href="/quiz?category={{ category.name }}">
                    <img src="{{ url_for('static', filename=category.image_url) }}" alt="{{ category.name }} Image">
                    <p class="font-medium black text-xl">{{ category.name }}</p>
                </a>
            {% endfor %}
        </section>
        <section class="more-categories flex flex-col gap-10 mt-10">
            <div class="p-2.5 rounded-lg catergory-border md:text-left text-center md:w-52 whitespace-nowrap">
                <h2 class="black font-bold uppercase text-xl md:text-2xl">Featured Quiz</h2>
            </div>
            <div class="flex md:flex-row flex-col gap-6 md:gap-0 justify-between">
                {% for category in categories %}
                    <a class="flex flex-col gap-4 category" href="/quiz?category={{ category.name }}">
                        <img src="{{ url_for('static', filename=category.image_url) }}" alt="{{ category.name }} Image">
                        <p class="font-medium black text-xl">{{ category.name }}</p>
                    </a>
                {% endfor %}
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-bg flex md:flex-row flex-col justify-around md:items-center md:px-0 px-10 py-12">
            <div class="w-36">
                <img src="{{ url_for('static', filename='images/Logo footer.png') }}">
            </div>
            <div class="flex flex-col md:gap-14 gap-6 text-white font-bold text-base md:text-lg md:mt-0 mt-6">
                <a href="">LEADERBOARD</a>
                <a href="">FAQ</a>
                <a href="">PRIVACY POLICY</a>
            </div>
            <div class="flex flex-col md:gap-14 gap-6 text-white font-bold text-base md:text-lg md:mt-0 mt-6">
                <a href="">ABOUT US</a>
                <a href="">CONTACT US</a>
                <a href="">TERMS OF SERVICE</a>
            </div>
        </div>
        <p class="footer-color md:text-base text-sm font-medium text-center py-3.5">Copyright Â© 2023 Amarachi Iheakam</p>
    </footer>


<script>
    const categoryLinks = document.querySelectorAll('.category');

    categoryLinks.forEach(link => {
        link.addEventListener('click', (event) => {
            event.preventDefault(); // Prevent the default link behavior

            const category = link.getAttribute('href').split('=')[1]; // Get the category name

            // Redirect to the quiz page with the selected category
            window.location.href = `/quiz?category=${category}`;
        });
    });

    const hamburger = document.querySelector('.hamburger');
    const navLinks = document.querySelector('.nav-links');

    hamburger.addEventListener('click', () => {
        hamburger.classList.toggle('show');
        navLinks.classList.toggle('show');
    });
</script>
      
</body>
</html>


    <script>
        let timer;
        let timeLeft = 10; // Adjust the timer duration as needed (in seconds)
        let currentScore = 0; // Initialize the score variable at the top level
    
        function openModal(header, message, score, isSuccess) {
            const modal = document.getElementById('modal');
            modal.style.display = 'block';
            document.getElementById('modal-header').textContent = header;
    
            const modalMessage = document.getElementById('modal-message');
            modalMessage.textContent = message;
    
            if (isSuccess) {
                modalMessage.style.color = 'green';
                modalMessage.style.fontSize = '24px';
                modalMessage.innerHTML += '<img src="../static/images/success.png" alt="Success">';
            } else {
                modalMessage.style.color = 'red';
                modalMessage.style.fontSize = '20px';
                modalMessage.innerHTML += '<img src="../static/images/error.png" alt="Error">';
            }
    
            document.getElementById('modal-score').textContent = `Your score: ${score}`;
        }
    
    
        function closeModal() {
            const modal = document.getElementById('modal');
            modal.style.display = 'none';
        }
    
        function displayQuizCompletion() {
            const quizContainer = document.getElementById('quiz-container');
            quizContainer.innerHTML = '';
    
            const completionMessage = document.createElement('div');
            completionMessage.innerHTML = `
                <h1>Quiz Completed</h1>
                <button onclick="restartQuiz()">Restart Quiz</button>
                <button onclick="fetchQuestions(selectedCategory)">Retake Quiz</button>
                <button onclick="location.href='/'; clearInterval(timer);">Choose a New Category</button>
            `;
    
            quizContainer.appendChild(completionMessage);
        }
    
        function fetchQuestions(selectedCategory) {
    console.log(`Fetching questions for category: ${selectedCategory}`);
    fetch(`/api/questions?category=${selectedCategory}`)
        .then(response => response.json())
        .then(data => {
            console.log('Data received:', data);
            const questionElement = document.getElementById('question-placeholder');
            const optionsContainer = document.getElementById('options-container');
            const nextButton = document.getElementById('next-button');
            let currentQuestionIndex = 0;
            const totalQuestions = data.questions.length;
            const correctAnswers = data.questions.map(question => question.correct_option);

            function displayQuestion(questionIndex) {
                const currentQuestion = data.questions[questionIndex];
                console.log(`Displaying question ${questionIndex + 1} of ${totalQuestions}`);
                questionElement.textContent = currentQuestion.question;
                optionsContainer.innerHTML = '';
                const options = [
                    currentQuestion.option_a,
                    currentQuestion.option_b,
                    currentQuestion.option_c,
                    currentQuestion.option_d
                ];

                options.forEach((option, index) => {
                    const optionLabel = document.createElement('label');
                    optionLabel.classList.add('flex', 'flex-row', 'gap-6', 'font-medium', 'option-label');
                    optionLabel.innerHTML = `
                        <input type="radio" value="${String.fromCharCode(65 + index)}" name="answer" class="mt-1"> ${String.fromCharCode(65 + index)}. ${option}
                    `;
                    optionsContainer.appendChild(optionLabel);
                });

                nextButton.addEventListener('click', () => {
                    const selectedAnswer = document.querySelector('input[name="answer"]:checked');
                    if (selectedAnswer) {
                        const answerValue = selectedAnswer.value;
                        if (answerValue === correctAnswers[questionIndex]) {
                            currentScore++; // Increment the score when the answer is correct
                            openModal('Success!', 'You answered the question correctly!', currentScore, true);
                        } else {
                            openModal('Incorrect', 'Your answer is incorrect.', currentScore, false);
                        }
                        selectedAnswer.checked = false;

                        if (questionIndex < totalQuestions - 1) {
                            questionIndex++;
                            displayQuestion(questionIndex);
                            startTimer(); // Start the timer for the next question
                        } else {
                            displayQuizCompletion();
                            nextButton.style.display = 'none';
                            clearInterval(timer); // Clear the timer on quiz completion
                        }
                    }
                });
                // Start the timer for the first question
                startTimer();
            }

            displayQuestion(currentQuestionIndex);
        })
        .catch(error => {
            console.error('Error fetching questions:', error);
        });
}

function startTimer() {
    timeLeft = 10;
    updateTimerDisplay();

    clearInterval(timer); // Clear any existing timers
    timer = setInterval(function () {
        if (timeLeft > 0) {
            timeLeft--;
            updateTimerDisplay();
        } else {
            clearInterval(timer);
            openModal("Time's Up!", "You ran out of time for this question.", currentScore, false);
        }
    }, 1000);
}

function updateTimerDisplay() {
    const timerElement = document.getElementById('timer');
    timerElement.textContent = `Time Left: ${timeLeft} seconds`;
}

document.addEventListener('DOMContentLoaded', function () {
    const urlParams = new URLSearchParams(window.location.search);
    const selectedCategory = urlParams.get('category');

    console.log(`Selected category from URL: ${selectedCategory}`);

    if (selectedCategory) {
        fetchQuestions(selectedCategory);
    } else {
        console.error('No category selected.');
    }
});

    </script>